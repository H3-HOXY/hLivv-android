/**
 * 현대IT&E 3차 프로젝트 API 명세서
 * 현대IT&E 3차 프로젝트에 사용되는 API 명세서
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package com.hoxy.hlivv.data.apis

import com.hoxy.hlivv.data.infrastructure.ApiClient
import com.hoxy.hlivv.data.infrastructure.ClientError
import com.hoxy.hlivv.data.infrastructure.ClientException
import com.hoxy.hlivv.data.infrastructure.MultiValueMap
import com.hoxy.hlivv.data.infrastructure.RequestConfig
import com.hoxy.hlivv.data.infrastructure.RequestMethod
import com.hoxy.hlivv.data.infrastructure.ResponseType
import com.hoxy.hlivv.data.infrastructure.ServerError
import com.hoxy.hlivv.data.infrastructure.ServerException
import com.hoxy.hlivv.data.infrastructure.Success
import com.hoxy.hlivv.data.models.AddressDto
import com.hoxy.hlivv.data.models.AddressReqDto

/**
 * @author 반정현
 */
class AddressControllerApi(basePath: String = "https://hlivv.com") : ApiClient(basePath) {

    /**
     *
     *
     * @param body
     * @return AddressDto
     */
    @Suppress("UNCHECKED_CAST")
    fun createAddress(body: AddressReqDto): AddressDto {
        val localVariableBody: Any = body
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/api/address"
        )
        val response = request<AddressDto>(
            localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as AddressDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     *
     *
     * @param page  (optional, default to 0)
     * @param pageSize  (optional, default to 20)
     * @return kotlin.Array<AddressDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getAddress(
        page: Int? = null,
        pageSize: Int? = null
    ): Array<AddressDto> {
        val localVariableQuery: MultiValueMap =
            mutableMapOf<String, List<String>>().apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (pageSize != null) {
                    put("pageSize", listOf(pageSize.toString()))
                }
            }
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/address", query = localVariableQuery
        )
        val response = request<Array<AddressDto>>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Array<AddressDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     *
     *
     * @param addressId
     * @return AddressDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getAddress1(addressId: Long): AddressDto {
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/address/{addressId}".replace("{" + "addressId" + "}", "$addressId")
        )
        val response = request<AddressDto>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as AddressDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     *
     *
     * @param orderId
     * @return kotlin.Array<AddressDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getOrderAddress(orderId: Long): Array<AddressDto> {
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/address/{orderId}".replace("{" + "orderId" + "}", "$orderId")
        )
        val response = request<Array<AddressDto>>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Array<AddressDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }
}
