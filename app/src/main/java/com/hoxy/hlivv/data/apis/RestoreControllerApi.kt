/**
 * 현대IT&E 3차 프로젝트 API 명세서
 * 현대IT&E 3차 프로젝트에 사용되는 API 명세서
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package com.hoxy.hlivv.data.apis

import com.hoxy.hlivv.data.infrastructure.ApiClient
import com.hoxy.hlivv.data.infrastructure.ClientError
import com.hoxy.hlivv.data.infrastructure.ClientException
import com.hoxy.hlivv.data.infrastructure.MultiValueMap
import com.hoxy.hlivv.data.infrastructure.RequestConfig
import com.hoxy.hlivv.data.infrastructure.RequestMethod
import com.hoxy.hlivv.data.infrastructure.ResponseType
import com.hoxy.hlivv.data.infrastructure.ServerError
import com.hoxy.hlivv.data.infrastructure.ServerException
import com.hoxy.hlivv.data.infrastructure.Success
import com.hoxy.hlivv.data.models.RestoreDto
import com.hoxy.hlivv.data.models.RestoreEmailDto
import com.hoxy.hlivv.data.models.RestoreRegisterDto
import com.hoxy.hlivv.data.models.RestoreStatusDto

class RestoreControllerApi(basePath: String = "https://hlivv.com") : ApiClient(basePath) {

    /**
     *
     *
     * @param memberId
     * @return kotlin.Array<RestoreDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getMyRestores(memberId: Long): Array<RestoreDto> {
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/restore/list/{memberId}".replace("{" + "memberId" + "}", "$memberId")
        )
        val response = request<Array<RestoreDto>>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Array<RestoreDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     *
     *
     * @param restoreId
     * @return RestoreDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getOneRestore(restoreId: Long): RestoreDto {
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/restore/{restoreId}".replace("{" + "restoreId" + "}", "$restoreId")
        )
        val response = request<RestoreDto>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as RestoreDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     *
     *
     * @return kotlin.Array<RestoreStatusDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getRestoreStatusInfo(): Array<RestoreStatusDto> {
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/restore/status"
        )
        val response = request<Array<RestoreStatusDto>>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Array<RestoreStatusDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     *
     *
     * @param body
     * @return RestoreDto
     */
    @Suppress("UNCHECKED_CAST")
    fun restoreRegister(body: RestoreRegisterDto): RestoreDto {
        val localVariableBody: Any = body
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/api/restore"
        )
        val response = request<RestoreDto>(
            localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as RestoreDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     *
     *
     * @param body
     * @return void
     */
    fun transferRestoreEmail(body: RestoreEmailDto): Unit {
        val localVariableBody: Any = body
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/api/restore/email"
        )
        val response = request<Any?>(
            localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     *
     *
     * @param body
     * @param restoreId
     * @return RestoreDto
     */
    @Suppress("UNCHECKED_CAST")
    fun updateRestore(body: RestoreDto, restoreId: Long): RestoreDto {
        val localVariableBody: Any = body
        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/api/restore/{restoreId}".replace("{" + "restoreId" + "}", "$restoreId")
        )
        val response = request<RestoreDto>(
            localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as RestoreDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     *
     *
     * @param restoreId
     * @param rewarded
     * @return RestoreDto
     */
    @Suppress("UNCHECKED_CAST")
    fun updateRestore2(restoreId: Long, rewarded: Boolean): RestoreDto {
        val localVariableQuery: MultiValueMap =
            mutableMapOf<String, List<String>>().apply {
                put("rewarded", listOf(rewarded.toString()))
            }
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/api/restore/rewarded/{restoreId}".replace("{" + "restoreId" + "}", "$restoreId"),
            query = localVariableQuery
        )
        val response = request<RestoreDto>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as RestoreDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }
}
