/**
 * 현대IT&E 3차 프로젝트 API 명세서
 * 현대IT&E 3차 프로젝트에 사용되는 API 명세서
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package com.hoxy.hlivv.data.apis

import com.hoxy.hlivv.data.infrastructure.ApiClient
import com.hoxy.hlivv.data.infrastructure.ClientError
import com.hoxy.hlivv.data.infrastructure.ClientException
import com.hoxy.hlivv.data.infrastructure.RequestConfig
import com.hoxy.hlivv.data.infrastructure.RequestMethod
import com.hoxy.hlivv.data.infrastructure.ResponseType
import com.hoxy.hlivv.data.infrastructure.ServerError
import com.hoxy.hlivv.data.infrastructure.ServerException
import com.hoxy.hlivv.data.infrastructure.Success
import com.hoxy.hlivv.data.models.MonthlyOrderSummaryDto
import com.hoxy.hlivv.data.models.OrderReqDto
import com.hoxy.hlivv.data.models.OrderResDto
/**
 * @author 반정현
 */
class OrderControllerApi(basePath: String = "https://hlivv.com") : ApiClient(basePath) {

    /**
     *
     *
     * @param body
     * @return OrderResDto
     */
    @Suppress("UNCHECKED_CAST")
    fun createOrder(body: OrderReqDto): OrderResDto {
        val localVariableBody: Any = body
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/api/order"
        )
        val response = request<OrderResDto>(
            localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrderResDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     *
     *
     * @return kotlin.Array<MonthlyOrderSummaryDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getMonthlyOrder(): Array<MonthlyOrderSummaryDto> {
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/order/total/month"
        )
        val response = request<Array<MonthlyOrderSummaryDto>>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Array<MonthlyOrderSummaryDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     *
     *
     * @return MonthlyOrderSummaryDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getTodayOrder(): MonthlyOrderSummaryDto {
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/order/total/today"
        )
        val response = request<MonthlyOrderSummaryDto>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as MonthlyOrderSummaryDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     *
     *
     * @param orderId
     * @param impUid
     * @return OrderResDto
     */
    @Suppress("UNCHECKED_CAST")
    fun requestCancelPayment(orderId: String, impUid: String): OrderResDto {
        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/api/order/payment/cancel/{orderId}/{impUid}".replace(
                "{" + "orderId" + "}",
                "$orderId"
            ).replace("{" + "impUid" + "}", "$impUid")
        )
        val response = request<OrderResDto>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrderResDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     *
     *
     * @param orderId
     * @return OrderResDto
     */
    @Suppress("UNCHECKED_CAST")
    fun requestCancelPaymentByOrder(orderId: String): OrderResDto {
        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/api/order/payment/cancel/{orderId}".replace("{" + "orderId" + "}", "$orderId")
        )
        val response = request<OrderResDto>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrderResDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     *
     *
     * @param orderId
     * @param impUid
     * @return OrderResDto
     */
    @Suppress("UNCHECKED_CAST")
    fun validatePayment(orderId: String, impUid: String): OrderResDto {
        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/api/order/payment/{orderId}/{impUid}".replace("{" + "orderId" + "}", "$orderId")
                .replace("{" + "impUid" + "}", "$impUid")
        )
        val response = request<OrderResDto>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrderResDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }
}
