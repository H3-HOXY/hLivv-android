/**
 * 현대IT&E 3차 프로젝트 API 명세서
 * 현대IT&E 3차 프로젝트에 사용되는 API 명세서
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package com.hoxy.hlivv.data.apis

import com.hoxy.hlivv.data.infrastructure.ApiClient
import com.hoxy.hlivv.data.infrastructure.ClientError
import com.hoxy.hlivv.data.infrastructure.ClientException
import com.hoxy.hlivv.data.infrastructure.RequestConfig
import com.hoxy.hlivv.data.infrastructure.RequestMethod
import com.hoxy.hlivv.data.infrastructure.ResponseType
import com.hoxy.hlivv.data.infrastructure.ServerError
import com.hoxy.hlivv.data.infrastructure.ServerException
import com.hoxy.hlivv.data.infrastructure.Success
import com.hoxy.hlivv.data.models.CouponDto
import com.hoxy.hlivv.data.models.MemberCouponDto

class CouponControllerApi(basePath: String = "https://hlivv.com") : ApiClient(basePath) {

    /**
     *
     *
     * @param couponId
     * @return void
     */
    fun deleteCoupon(couponId: Long): Unit {
        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/api/coupons/{couponId}".replace("{" + "couponId" + "}", "$couponId")
        )
        val response = request<Any?>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     *
     *
     * @return kotlin.Array<CouponDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getAllCoupon(): Array<CouponDto> {
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/coupons"
        )
        val response = request<Array<CouponDto>>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Array<CouponDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     *
     *
     * @param couponId
     * @return CouponDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getCouponBy(couponId: Long): CouponDto {
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/coupons/{couponId}".replace("{" + "couponId" + "}", "$couponId")
        )
        val response = request<CouponDto>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as CouponDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     *
     *
     * @param couponId
     * @return MemberCouponDto
     */
    @Suppress("UNCHECKED_CAST")
    fun issueCoupon(couponId: Long): MemberCouponDto {
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/api/coupons/{couponId}".replace("{" + "couponId" + "}", "$couponId")
        )
        val response = request<MemberCouponDto>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as MemberCouponDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     *
     *
     * @param body
     * @return CouponDto
     */
    @Suppress("UNCHECKED_CAST")
    fun saveCoupon(body: CouponDto): CouponDto {
        val localVariableBody: Any = body
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/api/coupons"
        )
        val response = request<CouponDto>(
            localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as CouponDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     *
     *
     * @param body
     * @param couponId
     * @return CouponDto
     */
    @Suppress("UNCHECKED_CAST")
    fun updateCoupon(body: CouponDto, couponId: Long): CouponDto {
        val localVariableBody: Any = body
        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/api/coupons/{couponId}".replace("{" + "couponId" + "}", "$couponId")
        )
        val response = request<CouponDto>(
            localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as CouponDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }
}
