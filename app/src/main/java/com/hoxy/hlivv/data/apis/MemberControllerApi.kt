/**
 * 현대IT&E 3차 프로젝트 API 명세서
 * 현대IT&E 3차 프로젝트에 사용되는 API 명세서
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package com.hoxy.hlivv.data.apis

import com.hoxy.hlivv.data.infrastructure.ApiClient
import com.hoxy.hlivv.data.infrastructure.ClientError
import com.hoxy.hlivv.data.infrastructure.ClientException
import com.hoxy.hlivv.data.infrastructure.MultiValueMap
import com.hoxy.hlivv.data.infrastructure.RequestConfig
import com.hoxy.hlivv.data.infrastructure.RequestMethod
import com.hoxy.hlivv.data.infrastructure.ResponseType
import com.hoxy.hlivv.data.infrastructure.ServerError
import com.hoxy.hlivv.data.infrastructure.ServerException
import com.hoxy.hlivv.data.infrastructure.Success
import com.hoxy.hlivv.data.models.CartDto
import com.hoxy.hlivv.data.models.MemberDto
import com.hoxy.hlivv.data.models.MemberGradeDto
import com.hoxy.hlivv.data.models.MemberResponseDto
import com.hoxy.hlivv.data.models.MonthlyMemberRegisterDto
import com.hoxy.hlivv.data.models.PageCartDto
import com.hoxy.hlivv.data.models.PageMemberCouponDto
import com.hoxy.hlivv.data.models.PageOrderResDto
import com.hoxy.hlivv.data.models.SignupDataGenDto
import com.hoxy.hlivv.data.models.SignupDto

class MemberControllerApi(basePath: String = "http://10.0.2.2:8080") : ApiClient(basePath) {

    /**
     *
     *
     * @return kotlin.Array<CartDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getAllCarts(): Array<CartDto> {
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/member/cart/all"
        )
        val response = request<Array<CartDto>>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Array<CartDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     *
     *
     * @param page
     * @param pageSize
     * @return PageCartDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getCarts(page: Int, pageSize: Int): PageCartDto {
        val localVariableQuery: MultiValueMap =
            mutableMapOf<String, List<String>>().apply {
                put("page", listOf(page.toString()))
                put("pageSize", listOf(pageSize.toString()))
            }
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/member/cart", query = localVariableQuery
        )
        val response = request<PageCartDto>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PageCartDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     *
     *
     * @return kotlin.Array<MonthlyMemberRegisterDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getMemberCntMonthly(): Array<MonthlyMemberRegisterDto> {
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/member/month/signup"
        )
        val response = request<Array<MonthlyMemberRegisterDto>>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Array<MonthlyMemberRegisterDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     *
     *
     * @return kotlin.Array<MemberGradeDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getMemberGradeCnt(): Array<MemberGradeDto> {
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/member/grade"
        )
        val response = request<Array<MemberGradeDto>>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Array<MemberGradeDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     *
     *
     * @return MemberDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getMyUserInfo(): MemberDto {
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/member"
        )
        val response = request<MemberDto>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as MemberDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     *
     *
     * @return MemberResponseDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getMyUserInfo1(): MemberResponseDto {
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/member/mypage"
        )
        val response = request<MemberResponseDto>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as MemberResponseDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     *
     *
     * @param page
     * @param pageSize
     * @return PageOrderResDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getOrders(page: Int, pageSize: Int): PageOrderResDto {
        val localVariableQuery: MultiValueMap =
            mutableMapOf<String, List<String>>().apply {
                put("page", listOf(page.toString()))
                put("pageSize", listOf(pageSize.toString()))
            }
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/member/order", query = localVariableQuery
        )
        val response = request<PageOrderResDto>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PageOrderResDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     *
     *
     * @param body
     * @return kotlin.Array<CartDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getSelectedItems(body: Array<Long>): Array<CartDto> {
        val localVariableBody: Any = body
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/api/member/cart/order"
        )
        val response = request<Array<CartDto>>(
            localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Array<CartDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     *
     *
     * @param page
     * @param pageSize
     * @return PageMemberCouponDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getUnusedCoupons(page: Int, pageSize: Int): PageMemberCouponDto {
        val localVariableQuery: MultiValueMap =
            mutableMapOf<String, List<String>>().apply {
                put("page", listOf(page.toString()))
                put("pageSize", listOf(pageSize.toString()))
            }
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/member/coupons", query = localVariableQuery
        )
        val response = request<PageMemberCouponDto>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PageMemberCouponDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     *
     *
     * @param loginId
     * @return MemberDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getUserInfo(loginId: String): MemberDto {
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/member/{loginId}".replace("{" + "loginId" + "}", "$loginId")
        )
        val response = request<MemberDto>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as MemberDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     *
     *
     * @param body
     * @return MemberDto
     */
    @Suppress("UNCHECKED_CAST")
    fun signup(body: SignupDto): MemberDto {
        val localVariableBody: Any = body
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/api/signup"
        )
        val response = request<MemberDto>(
            localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as MemberDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     *
     *
     * @param body
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun signupDataGen(body: Array<SignupDataGenDto>): String {
        val localVariableBody: Any = body
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/api/signup-data-gen"
        )
        val response = request<String>(
            localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     *
     *
     * @param body
     * @return MemberDto
     */
    @Suppress("UNCHECKED_CAST")
    fun updateMember(body: MemberDto): MemberDto {
        val localVariableBody: Any = body
        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/api/updateMember"
        )
        val response = request<MemberDto>(
            localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as MemberDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }
}
