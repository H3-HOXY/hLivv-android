/**
 * 현대IT&E 3차 프로젝트 API 명세서
 * 현대IT&E 3차 프로젝트에 사용되는 API 명세서
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package com.hoxy.hlivv.data.apis

import com.hoxy.hlivv.data.infrastructure.ApiClient
import com.hoxy.hlivv.data.infrastructure.ClientError
import com.hoxy.hlivv.data.infrastructure.ClientException
import com.hoxy.hlivv.data.infrastructure.RequestConfig
import com.hoxy.hlivv.data.infrastructure.RequestMethod
import com.hoxy.hlivv.data.infrastructure.ResponseType
import com.hoxy.hlivv.data.infrastructure.ServerError
import com.hoxy.hlivv.data.infrastructure.ServerException
import com.hoxy.hlivv.data.infrastructure.Success
import com.hoxy.hlivv.data.models.LoginDto
import com.hoxy.hlivv.data.models.TokenDto

/**
 * @author 반정현
 */
class AuthControllerApi(basePath: String = "https://hlivv.com") : ApiClient(basePath) {

    /**
     *
     *
     * @param body
     * @return TokenDto
     */
    @Suppress("UNCHECKED_CAST")
    fun authorize(body: LoginDto): TokenDto {
        val localVariableBody: Any = body
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/api/login"
        )
        val response = request<TokenDto>(
            localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as TokenDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     *
     *
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun helloCurr(): String {
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/login/member"
        )
        val response = request<String>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }
}
