/**
 * 현대IT&E 3차 프로젝트 API 명세서
 * 현대IT&E 3차 프로젝트에 사용되는 API 명세서
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package com.hoxy.hlivv.data.apis

import com.hoxy.hlivv.data.infrastructure.ApiClient
import com.hoxy.hlivv.data.infrastructure.ClientError
import com.hoxy.hlivv.data.infrastructure.ClientException
import com.hoxy.hlivv.data.infrastructure.MultiValueMap
import com.hoxy.hlivv.data.infrastructure.RequestConfig
import com.hoxy.hlivv.data.infrastructure.RequestMethod
import com.hoxy.hlivv.data.infrastructure.ResponseType
import com.hoxy.hlivv.data.infrastructure.ServerError
import com.hoxy.hlivv.data.infrastructure.ServerException
import com.hoxy.hlivv.data.infrastructure.Success
import com.hoxy.hlivv.data.models.CategoryDto
import com.hoxy.hlivv.data.models.ProductDto

class CategoryControllerApi(basePath: String = "https://hlivv.com") :
    ApiClient(basePath) {

    /**
     *
     *
     * @param body
     * @return CategoryDto
     */
    @Suppress("UNCHECKED_CAST")
    fun addCategory(body: CategoryDto): CategoryDto {
        val localVariableBody: Any = body
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/api/category"
        )
        val response = request<CategoryDto>(
            localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as CategoryDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     *
     *
     * @return kotlin.Array<CategoryDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getCategories(): Array<CategoryDto> {
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/category"
        )
        val response = request<Array<CategoryDto>>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Array<CategoryDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     *
     *
     * @param categoryId
     * @param pageNo  (optional, default to 1)
     * @param pageSize  (optional, default to 20)
     * @param sortCriteria  (optional, default to PRICE_DESC)
     * @return kotlin.Array<ProductDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getProductsWithCategory(
        categoryId: String,
        pageNo: Int? = null,
        pageSize: Int? = null,
        sortCriteria: String? = null
    ): Array<ProductDto> {
        val localVariableQuery: MultiValueMap =
            mutableMapOf<String, List<String>>().apply {
                if (pageNo != null) {
                    put("pageNo", listOf(pageNo.toString()))
                }
                if (pageSize != null) {
                    put("pageSize", listOf(pageSize.toString()))
                }
                if (sortCriteria != null) {
                    put("sortCriteria", listOf(sortCriteria.toString()))
                }
            }
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/category/{categoryId}/products".replace("{" + "categoryId" + "}", "$categoryId"),
            query = localVariableQuery
        )
        val response = request<Array<ProductDto>>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Array<ProductDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }
}
