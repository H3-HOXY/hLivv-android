/**
 * 현대IT&E 3차 프로젝트 API 명세서
 * 현대IT&E 3차 프로젝트에 사용되는 API 명세서
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package com.hoxy.hlivv.data.apis

import com.hoxy.hlivv.data.infrastructure.ApiClient
import com.hoxy.hlivv.data.infrastructure.ClientError
import com.hoxy.hlivv.data.infrastructure.ClientException
import com.hoxy.hlivv.data.infrastructure.MultiValueMap
import com.hoxy.hlivv.data.infrastructure.RequestConfig
import com.hoxy.hlivv.data.infrastructure.RequestMethod
import com.hoxy.hlivv.data.infrastructure.ResponseType
import com.hoxy.hlivv.data.infrastructure.ServerError
import com.hoxy.hlivv.data.infrastructure.ServerException
import com.hoxy.hlivv.data.infrastructure.Success
import com.hoxy.hlivv.data.models.MemberDto
import com.hoxy.hlivv.data.models.ProductDto
import com.hoxy.hlivv.data.models.ProductImageDto
import com.hoxy.hlivv.data.models.RestoreDto

/**
 * @author 반정현
 */
class APIApi(basePath: String = "https://hlivv.com") : ApiClient(basePath) {

    /**
     * memberId로 멤버 조회
     *
     * @param id
     * @return MemberDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getMemberById(id: Long): MemberDto {
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/backoffice/api/member/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<MemberDto>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as MemberDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     * 상품 이미지 URL 가져오기
     *
     * @param id
     * @return kotlin.Array<ProductImageDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getProductImages(id: Long): Array<ProductImageDto> {
        val localVariableQuery: MultiValueMap =
            mutableMapOf<String, List<String>>().apply {
                put("id", listOf(id.toString()))
            }
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/backoffice/api/getProductImageUrls", query = localVariableQuery
        )
        val response = request<Array<ProductImageDto>>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Array<ProductImageDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     * restoreId로 리스토어 조회
     *
     * @param id
     * @return RestoreDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getRestoreById(id: Long): RestoreDto {
        val localVariableQuery: MultiValueMap =
            mutableMapOf<String, List<String>>().apply {
                put("id", listOf(id.toString()))
            }
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/backoffice/api/getRestore", query = localVariableQuery
        )
        val response = request<RestoreDto>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as RestoreDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     * restoreId로 리스토어 이미지 조회
     *
     * @param id
     * @return kotlin.Array<kotlin.String>
     */
    @Suppress("UNCHECKED_CAST")
    fun getRestoreImages(id: Long): Array<String> {
        val localVariableQuery: MultiValueMap =
            mutableMapOf<String, List<String>>().apply {
                put("id", listOf(id.toString()))
            }
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/backoffice/api/getRestoreImageUrls", query = localVariableQuery
        )
        val response = request<Array<String>>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Array<String>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     * 검수완료 된 모든 리스토어 완료 처리, 멤버에게 포인트 지급
     *
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun restoreRewarded(): String {
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/backoffice/api/restore/rewarded"
        )
        val response = request<String>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     * restoreId로 리스토어 완료 처리, 멤버에게 포인트 지급
     *
     * @param restoreId
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun restoreRewarded1(restoreId: Long): String {
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/backoffice/api/restore/rewarded/{restoreId}".replace(
                "{" + "restoreId" + "}",
                "$restoreId"
            )
        )
        val response = request<String>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     * 회원 정보 업데이트
     *
     * @param body
     * @return MemberDto
     */
    @Suppress("UNCHECKED_CAST")
    fun updateMember1(body: MemberDto): MemberDto {
        val localVariableBody: Any = body
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/backoffice/api/updateMember"
        )
        val response = request<MemberDto>(
            localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as MemberDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     * 상품 정보 업데이트
     *
     * @param body
     * @return ProductDto
     */
    @Suppress("UNCHECKED_CAST")
    fun updateProduct1(body: ProductDto): ProductDto {
        val localVariableBody: Any = body
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/backoffice/api/updateProduct"
        )
        val response = request<ProductDto>(
            localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ProductDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     * 리스토어 정보 수정
     *
     * @param body
     * @return RestoreDto
     */
    @Suppress("UNCHECKED_CAST")
    fun updateRestore1(body: RestoreDto): RestoreDto {
        val localVariableBody: Any = body
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/backoffice/api/updateRestore"
        )
        val response = request<RestoreDto>(
            localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as RestoreDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )

            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }
}
